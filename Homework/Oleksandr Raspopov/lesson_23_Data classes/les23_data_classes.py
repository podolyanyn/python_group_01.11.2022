# Task 1
# Practise type annotations
#
# Go to your implementation of the Phonebook application from module 1 or any other comprehensive code,
# which you have done during the course, and annotate this code with type hints, using knowledge from this lesson.

from typing import Dict, Tuple, List

# Hometask 16.3 "Product Store"
class Product:
    def __init__(self, type_: str, name: str, price: float) -> None:
        self.type_ = type_
        self.name = name
        self.price = price


class ProductStore:

    def __init__(self) -> None:
        self.PREMIUM: float = 1.3
        self.stock: list = []
        self.pricelist: Dict[str, float] = {}
        self.discounts: dict = {}
        self.sales: list = []

    def __str__(self) -> str:
        return f'stock: {self.stock}\n' \
               f'pricelist: {self.pricelist}\n' \
               f'promo: {self.discounts}'

    def add(self, product: Product, amount: int) -> None:  # adds a specified q-ty of a single product with a predefined price premium (30%)
        price: float = round(product.price*self.PREMIUM, 2)
        self.stock.append({product.name: amount, 'type': product.type_})
        self.pricelist.update({product.name: price})

    def set_discount(self, identifier: str, percent: int) -> None:  # adds a discount for all products specified by input identifiers (type or name).
        return self.discounts.update({identifier: - percent})

    def sell_product(self, product_name: str, amount: int) -> None:  # removes a particular amount of products from the store if available, in other case raises an error.
        def checkout(product_name, amount) -> None:

            def get_discount(product_name):
                try:
                    return self.discounts.get(product_name) / 100
                except TypeError:
                    for item in self.stock:
                        if item.get(product_name):
                            type_name = item.get('type')
                            return self.discounts.get(type_name) / 100
                return 1

            price: float = self.pricelist.get(product_name)
            discount: float = - round(get_discount(product_name) * price, 2)
            cash_in: float = round((price - discount) * amount, 2)
            cos: float = round((price / self.PREMIUM) * amount, 2)
            gross_income: float = round(cash_in - cos, 2)
            return self.sales.append((product_name, amount, price, discount, cash_in, gross_income))

        for item in self.stock:
            if item.get(product_name):
                if item.get(product_name) < amount:
                    raise ValueError(f'stock left: {item.get(product_name)}')
                balance: int = item[product_name] - amount
                checkout(product_name, amount)
                return item.update({product_name: balance})
        raise ValueError('No product found')

    def get_product_info(self, product_name: str) -> Tuple:  # returns a tuple with product name and amount of items in the store.
        for item in self.stock:
            if item.get(product_name):
                return product_name, item[product_name]
        raise ValueError('No product found')

    def get_income(self) -> float:  # returns amount of money earned by ProductStore instance.
        cash_in = 0
        gross_income = 0
        print('- ' * 20)
        for sales in self.sales:
            print(f'{sales[0]}: {sales[4]} = {sales[1]} * ({sales[2]} - {sales[3]})')
            cash_in += sales[4]
            gross_income += sales[5]
        print('- ' * 20)
        print(f'Gross income: {round(gross_income, 2)}')
        return cash_in

    def get_all_products(self) -> List:  # returns information about all available products in the store.
        return self.stock


product1: Product = Product('Sport', 'Football T-Shirt', 100)
store1: ProductStore = ProductStore()
store_invalid: ProductStore = Product('Sport', 'Football T-Shirt', 100)  # Test 1

store1.add(product1, 10)
store1.add(store_invalid, 10)  # Test 2

# Task 2
# Mypy check
#
# Use Mypy project (github.com/python/mypy) to perform static type check ing of your code.
# Play around a little bit with Mypy, go through results and reports generated by running the mypy,
# perform refactoring based on the mentioned results.

print('Done:')
print("""les23_data_classes.py:52: error: Incompatible types in assignment (expression has type "Optional[float]", variable has type "float")  [assignment]
les23_data_classes.py:92: error: Incompatible types in assignment (expression has type "Product", variable has type "ProductStore")  [assignment]
les23_data_classes.py:95: error: Argument 1 to "add" of "ProductStore" has incompatible type "ProductStore"; expected "Product"  [arg-type]
Found 3 errors in 1 file (checked 1 source file)
""")

print('My comments on findings:')
print('line 52 - seems OK, not error')
print('line 92 - Test error captured - OK')
print('line 95 - Test error captured - OK')
